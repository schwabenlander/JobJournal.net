<ModalDialog @ref="Modal" ModalTitle="Delete Company">
    <ModalContent>
        @if (HasAssociatedRecords)
        {
            <p class="text-danger"><strong><i class="fas fa-exclamation-triangle"></i> ERROR</strong></p>
            <p>
                You must delete all contacts and job applications associated with <strong>@Company.CompanyName</strong> before deleting the company.
            </p>
        }
        else
        {
            <p>Are you sure you want to delete <strong>@Company.CompanyName</strong>?</p>
            <p class="text-danger">
                <strong><i class="fas fa-exclamation-triangle"></i> WARNING: </strong>You cannot undo this action!
            </p>
        }
    </ModalContent>
    <ModalFooter>
        @if (!HasAssociatedRecords)
        {
            <button type="button" class="btn btn-danger" @onclick="HandleDelete"><i class="fas fa-trash-alt"></i> DELETE</button>
        }
        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="Modal.Hide">Cancel</button>
    </ModalFooter>
</ModalDialog>

@code {
    [Parameter]
    public CompanyDTO Company { get; set; }

    [Parameter]
    public EventCallback<CompanyDTO> OnCompanyDeleted { get; set; }

    [Inject]
    public ICompanyDataService CompanyDataService { get; set; }

    [Inject]
    public ICompanyContactDataService CompanyContactDataService { get; set; }

    [Inject]
    public IJobApplicationDataService JobApplicationDataService { get; set; }

    bool HasAssociatedRecords { get; set; } = true;

    ModalDialog Modal { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        bool anyAssociatedCompanyContacts = (await CompanyContactDataService.GetCompanyContactCountAsync(Company.Id)) > 0;
        bool anyAssociatedJobApplications = (await JobApplicationDataService.GetJobApplicationsByCompanyAsync(Company.Id)).Results.Any();

        if (anyAssociatedCompanyContacts || anyAssociatedJobApplications)
            HasAssociatedRecords = true;
        else
            HasAssociatedRecords = false;
    }

    public async Task Hide()
    {
        await Modal.Hide();
    }

    public void Show()
    {
        Modal.Show();
    }

    protected async Task HandleDelete()
    {
        await CompanyDataService.DeleteCompanyAsync(Company.Id);
        await Hide();
        await OnCompanyDeleted.InvokeAsync(Company);
    }
}
